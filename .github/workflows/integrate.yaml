# https://docs.github.com/en/actions

name: "Integrate"

on: # yamllint disable-line rule:truthy
  pull_request: null
  push:
    branches:
      - "master"

jobs:
  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Lint YAML files"
        uses: "ibiqlik/action-yamllint@v3.1"
        with:
          config_file: ".yamllint.yaml"
          file_or_dir: "."
          strict: true

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.31.1"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run ergebnis/composer-normalize"
        run: "composer normalize --ansi --dry-run"

      - name: "Create cache directory for squizlabs/php_codesniffer"
        run: "mkdir -p .build/php_codesniffer"

      - name: "Cache cache directory for squizlabs/php_codesniffer"
        uses: "actions/cache@v4"
        with:
          path: ".build/php_codesniffer"
          key: "php-${{ matrix.php-version }}-php_codesniffer-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-php_codesniffer-"

      - name: "Run squizlabs/php_codesniffer"
        run: "vendor/bin/phpcs"

  dependency-analysis:
    name: "Dependency Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.31.1"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run maglnet/composer-require-checker"
        run: "vendor/bin/composer-require-checker check --config-file=$(pwd)/composer-require-checker.json"

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.31.1"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Create cache directory for phpstan/phpstan"
        run: "mkdir -p .build/phpstan"

      - name: "Cache cache directory for phpstan/phpstan"
        uses: "actions/cache@v4"
        with:
          path: ".build/phpstan"
          key: "php-${{ matrix.php-version }}-phpstan-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-phpstan-"

      - name: "Run phpstan/phpstan"
        run: "vendor/bin/phpstan analyse --configuration=phpstan.neon.dist --memory-limit=-1"

      - name: "Create cache directory for vimeo/psalm"
        run: "mkdir -p .build/psalm"

      - name: "Cache cache directory for vimeo/psalm"
        uses: "actions/cache@v4"
        with:
          path: ".build/psalm"
          key: "php-${{ matrix.php-version }}-psalm-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-psalm-"

      - name: "Run vimeo/psalm"
        run: "vendor/bin/psalm --config=psalm.xml --output-format=github --shepherd --show-info=false --stats --threads=4"

  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"
          - "8.2"
          - "8.3"
          - "8.4"

        dependencies:
          - "lowest"
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.31.1"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Set up problem matchers for phpunit/phpunit"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run unit tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --colors=always --configuration=test/Unit/phpunit.xml.dist"

      - name: "Run integration tests with codeception/codeception"
        run: "vendor/bin/codecept run --config=codeception.dist.yml --steps"
